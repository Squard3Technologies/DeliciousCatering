



CREATE TABLE IF NOT EXISTS typesofevents
(
	id 		BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 1 START WITH 1 INCREMENT BY 1),
	name 	VARCHAR (50) UNIQUE NOT NULL,
	enabled	BOOLEAN NOT NULL DEFAULT(true),
	PRIMARY KEY(id)
);

INSERT INTO typesofevents(id, name)
SELECT 1, 'Baptism'
WHERE
NOT EXISTS 
(
	SELECT id FROM typesofevents WHERE name = 'Baptism'
);


INSERT INTO typesofevents(id, name)
SELECT 2, 'Birthday'
WHERE
NOT EXISTS 
(
	SELECT id FROM typesofevents WHERE name = 'Birthday'
);


INSERT INTO typesofevents(id, name)
SELECT 3, 'Wedding'
WHERE
NOT EXISTS 
(
	SELECT id FROM typesofevents WHERE name = 'Wedding'
);


INSERT INTO typesofevents(id, name)
SELECT 4, 'Year End Function'
WHERE
NOT EXISTS 
(
	SELECT id FROM typesofevents WHERE name = 'Year End Function'
);


CREATE TABLE IF NOT EXISTS phoneTypes
(
	id 		BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 1 START WITH 1 INCREMENT BY 1),
	name 	VARCHAR (50) UNIQUE NOT NULL,
	enabled	BOOLEAN NOT NULL DEFAULT(true),
	PRIMARY KEY(id)
);

INSERT INTO phoneTypes(name)
SELECT 'Tel'
WHERE
NOT EXISTS 
(
	SELECT name FROM phoneTypes WHERE name = 'Tel'
);

INSERT INTO phoneTypes(name)
SELECT 'Fax'
WHERE
NOT EXISTS 
(
	SELECT name FROM phoneTypes WHERE name = 'Fax'
);

INSERT INTO phoneTypes(name)
SELECT 'Cell'
WHERE
NOT EXISTS 
(
	SELECT name FROM phoneTypes WHERE name = 'Cell'
);


CREATE TABLE IF NOT EXISTS emailTypes
(
	id 		BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 1 START WITH 1 INCREMENT BY 1),
	name 	VARCHAR (50) UNIQUE NOT NULL,
	enabled	BOOLEAN NOT NULL DEFAULT(true),
	PRIMARY KEY(id)
);



INSERT INTO emailTypes(name)
SELECT 'Personal'
WHERE
NOT EXISTS 
(
	SELECT name FROM emailTypes WHERE name = 'Personal'
);


INSERT INTO emailTypes(name)
SELECT 'Work'
WHERE
NOT EXISTS 
(
	SELECT name FROM emailTypes WHERE name = 'Work'
);

INSERT INTO emailTypes(name)
SELECT 'Business'
WHERE
NOT EXISTS 
(
	SELECT name FROM emailTypes WHERE name = 'Business'
);


CREATE TABLE IF NOT EXISTS addressTypes
(
	id 		BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 1 START WITH 1 INCREMENT BY 1),
	name 	VARCHAR (50) UNIQUE NOT NULL,
	enabled	BOOLEAN NOT NULL DEFAULT(true),
	PRIMARY KEY(id)
);


INSERT INTO addressTypes(name)
SELECT 'Residential'
WHERE
NOT EXISTS 
(
	SELECT name FROM addressTypes WHERE name = 'Residential'
);

INSERT INTO addressTypes(name)
SELECT 'Business'
WHERE
NOT EXISTS 
(
	SELECT name FROM addressTypes WHERE name = 'Business'
);


CREATE TABLE IF NOT EXISTS orderStages
(
	id 		BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 1 START WITH 1 INCREMENT BY 1),
	name 	VARCHAR (50) UNIQUE NOT NULL,
	description 	VARCHAR (500) NULL,
	enabled	BOOLEAN NOT NULL DEFAULT(true),
	PRIMARY KEY(id)
);



INSERT INTO orderStages(name, description)
SELECT 'SUBMITTED', 'New orders received from the client'
WHERE
NOT EXISTS 
(
	SELECT name FROM orderStages WHERE name = 'SUBMITTED'
);



INSERT INTO orderStages(name, description)
SELECT 'AWAITING DEPOSIT', 'Orders received from the client, accepted by the business and awaiting deposit'
WHERE
NOT EXISTS 
(
	SELECT name FROM orderStages WHERE name = 'AWAITING DEPOSIT'
);



INSERT INTO orderStages(name, description)
SELECT 'CONFIRMED', 'Orders received from the client, accepted by the business and deposit received'
WHERE
NOT EXISTS 
(
	SELECT name FROM orderStages WHERE name = 'CONFIRMED'
);



INSERT INTO orderStages(name, description)
SELECT 'COMPLETED', 'Orders completed by the business'
WHERE
NOT EXISTS 
(
	SELECT name FROM orderStages WHERE name = 'COMPLETED'
);



INSERT INTO orderStages(name, description)
SELECT 'FULLY PAID', 'Orders completed by the business and client paid full amount'
WHERE
NOT EXISTS 
(
	SELECT name FROM orderStages WHERE name = 'FULLY PAID'
);
	
	
	
	
	
	


CREATE TABLE IF NOT EXISTS clients (
	id				BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 1000000000 START WITH 1000000000 INCREMENT BY 1),
	tittle			VARCHAR (50) NOT NULL,
	name 			VARCHAR (250) NOT NULL,
	surname 		VARCHAR (250) NOT NULL,
	dateOfBirth		DATE NULL,
	gender	 		VARCHAR (50) NOT NULL,
	passcode		VARCHAR (50) NULL,
	securepwd		VARCHAR (500) NULL,
	created_at		TIMESTAMP NOT NULL DEFAULT NOW(),
	updated_at		TIMESTAMP NULL,
	deleted_at		TIMESTAMP NULL,
	PRIMARY KEY(id)
);

INSERT INTO clients(tittle, name, surname, dateOfBirth, gender, passcode, securepwd)
SELECT 'Mr','Vusi', 'Malinga', '1990-04-01', 'Male', 'Pass123', 'Pass123'
WHERE
NOT EXISTS 
(
	SELECT id FROM clients WHERE id = 1000000000
);


CREATE TABLE IF NOT EXISTS users (
	id				BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 2000000000 START WITH 2000000000 INCREMENT BY 1),
	name 			VARCHAR (50) NOT NULL,
	surname 		VARCHAR (50) NOT NULL,
	dateOfBirth		DATE NULL,
	username		VARCHAR (50) UNIQUE NULL,
	password		VARCHAR (500) NOT NULL DEFAULT 'Pass123',
	created_at		TIMESTAMP NOT NULL DEFAULT NOW(),
	updated_at		TIMESTAMP NULL,
	deleted_at		TIMESTAMP NULL,
	PRIMARY KEY(id)
);


INSERT INTO users(name, surname, dateOfBirth, username)
SELECT 'Vusi', 'Malinga', '1990-04-01', 'vusieam'
WHERE
NOT EXISTS 
(
	SELECT id FROM users WHERE id = 2000000000
);



CREATE TABLE IF NOT EXISTS phones
(
	id 				BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 1 START WITH 1 INCREMENT BY 1),
	clientId	 	BIGINT NOT NULL,
	phoneTypeId 	BIGINT NULL,
	phoneNumber 	VARCHAR (50) UNIQUE NOT NULL,	
	IsPrimary		BOOLEAN NOT NULL,
	enabled			BOOLEAN NOT NULL DEFAULT(true),
	created_at		TIMESTAMP NOT NULL DEFAULT NOW(),
	updated_at		TIMESTAMP NULL,
	deleted_at		TIMESTAMP NULL,
	PRIMARY KEY(id),
	FOREIGN KEY (clientId) REFERENCES clients(id) ON DELETE CASCADE,
	FOREIGN KEY (phoneTypeId) REFERENCES phoneTypes(id) ON DELETE SET NULL
);


INSERT INTO phones(clientId, phoneTypeId, phoneNumber, IsPrimary)
SELECT 1000000000, 3, '0607452041', true
WHERE
NOT EXISTS 
(
	SELECT id FROM phones WHERE clientId = 1000000000
);
	


CREATE TABLE IF NOT EXISTS emails
(
	id 				BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 1 START WITH 1 INCREMENT BY 1),
	clientId	 	BIGINT NOT NULL,
	emailTypeId 	BIGINT NULL,
	emailAddress 	VARCHAR (50) UNIQUE NOT NULL,	
	IsPrimary		BOOLEAN NOT NULL,
	enabled			BOOLEAN NOT NULL DEFAULT(true),
	created_at		TIMESTAMP NOT NULL DEFAULT NOW(),
	updated_at		TIMESTAMP NULL,
	deleted_at		TIMESTAMP NULL,
	PRIMARY KEY(id),
	FOREIGN KEY (clientId) REFERENCES clients(id) ON DELETE CASCADE,
	FOREIGN KEY (emailTypeId) REFERENCES emailTypes(id) ON DELETE SET NULL
);

INSERT INTO emails(clientId, emailTypeId, emailAddress, IsPrimary)
SELECT 1000000000, 1, 'vusieam@gmail.com', true
WHERE
NOT EXISTS 
(
	SELECT e.id FROM emails e WHERE e.clientId = 1000000000
);


CREATE TABLE IF NOT EXISTS addresses
(
	id 				BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 1 START WITH 1 INCREMENT BY 1),
	clientId	 	BIGINT NOT NULL,
	addressTypeId 	BIGINT NULL,
	streetNumber 	VARCHAR (50) NULL,	
	streetName	 	VARCHAR (250) NULL,	
	complexBuilding	 	VARCHAR (250) NULL,	
	surburb		 	VARCHAR (250) NULL,	
	city		 	VARCHAR (250) NULL,	
	zipcode		 	VARCHAR (250) NULL,	
	province	 	VARCHAR (250) NULL,	
	country		 	VARCHAR (250) NULL,	
	IsPrimary		BOOLEAN NOT NULL,
	enabled			BOOLEAN NOT NULL DEFAULT(true),
	created_at		TIMESTAMP NOT NULL DEFAULT NOW(),
	updated_at		TIMESTAMP NULL,
	deleted_at		TIMESTAMP NULL,
	PRIMARY KEY(id),
	FOREIGN KEY (clientId) REFERENCES clients(id) ON DELETE CASCADE,
	FOREIGN KEY (addressTypeId) REFERENCES addressTypes(id) ON DELETE SET NULL
);






CREATE TABLE IF NOT EXISTS orderDetails
(
	id 				BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 9000000 START WITH 9000000 INCREMENT BY 1),
	clientId	 	BIGINT NOT NULL,
	typeofEventId 	BIGINT NOT NULL,
	eventDate	 	DATE NOT NULL,	
	eventTime	 	TIME NOT NULL,	
	expectedAdultsAttendance	 	integer DEFAULT 0,	
	expectedKidsAttendance	 		integer DEFAULT 0,
	emailAddress	VARCHAR (500) NULL,		
	cellMobile	VARCHAR (500) NULL,		
	telNo	VARCHAR (500) NULL,	
	
	adultMenuTacos	BOOLEAN NOT NULL DEFAULT(false),	
	adultMenuChickenWrap	BOOLEAN NOT NULL DEFAULT(false),	
	adultMenuChickenKebab	BOOLEAN NOT NULL DEFAULT(false),	
	
	kidsMenuMiniPizzaCheese	BOOLEAN NOT NULL DEFAULT(false),	
	kidsMenuMiniMiniPizza	BOOLEAN NOT NULL DEFAULT(false),	
	kidsMenuMiniSliders	BOOLEAN NOT NULL DEFAULT(false),	
	kidsMenuMiniHandpie	BOOLEAN NOT NULL DEFAULT(false),	
	
	menuDrinksIcetea	BOOLEAN NOT NULL DEFAULT(false),	
	menuDrinksOrangeJuice	BOOLEAN NOT NULL DEFAULT(false),	
	menuDrinksAppleJuice	BOOLEAN NOT NULL DEFAULT(false),	
	menuDrinksFantaOrange	BOOLEAN NOT NULL DEFAULT(false),	
	menuDrinksCocacola	BOOLEAN NOT NULL DEFAULT(false),	
	menuDrinksApricotJuice	BOOLEAN NOT NULL DEFAULT(false),	
	
	menuDessertOreoPudding	BOOLEAN NOT NULL DEFAULT(false),	
	menuDessertOreoBalls	BOOLEAN NOT NULL DEFAULT(false),	
	menuDessertChurros	BOOLEAN NOT NULL DEFAULT(false),	
	menuDessertDonuts	BOOLEAN NOT NULL DEFAULT(false),	
	menuDessertMalva	BOOLEAN NOT NULL DEFAULT(false),	
	menuDessertBerry	BOOLEAN NOT NULL DEFAULT(false),
			
	decoration		BOOLEAN NOT NULL DEFAULT(false),	
	themeDetails	VARCHAR (4000) NULL,	
	totalCost		NUMERIC(7,5) NULL,
	
	stage			VARCHAR(50) NOT NULL DEFAULT('SUBMITTED'),--SUBMITTED|ACCEPTED|PAID|COMPLETED
	created_at		TIMESTAMP NOT NULL DEFAULT NOW(),
	updated_at		TIMESTAMP NULL,
	deleted_at		TIMESTAMP NULL,
	PRIMARY KEY(id),
	FOREIGN KEY (clientId) REFERENCES clients(id) ON DELETE CASCADE,
	FOREIGN KEY (typeofEventId) REFERENCES typesofevents(id) ON DELETE CASCADE
);





CREATE TABLE IF NOT EXISTS orderDetailAddresses
(
	id 				BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 1 START WITH 1 INCREMENT BY 1),
	orderId		 	BIGINT NOT NULL,
	addressTypeId 	BIGINT NULL,
	streetNumber 	VARCHAR (50) NULL,	
	streetName	 	VARCHAR (250) NULL,	
	complexBuilding	 	VARCHAR (250) NULL,	
	surburb		 	VARCHAR (250) NULL,	
	city		 	VARCHAR (250) NULL,	
	zipcode		 	VARCHAR (250) NULL,	
	province	 	VARCHAR (250) NULL,	
	country		 	VARCHAR (250) NULL,
	created_at		TIMESTAMP NOT NULL DEFAULT NOW(),
	updated_at		TIMESTAMP NULL,
	PRIMARY KEY(id),
	FOREIGN KEY (orderId) REFERENCES orderDetails(id) ON DELETE CASCADE,
	FOREIGN KEY (addressTypeId) REFERENCES addressTypes(id) ON DELETE SET NULL
);


--CREATE TABLE IF NOT EXISTS orderAccountBooks
--(
--	id 				BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 9000000 START WITH 9000000 INCREMENT BY 1),
--	orderId		 	BIGINT NOT NULL REFERENCES orderDetails(id),
--	credit			NUMERIC(7,5) NOT NULL,
--	runningBalance	NUMERIC(7,5) NULL,
--	created_at		DATE NOT NULL DEFAULT NOW()
--)




-------PROCEDURES


CREATE OR REPLACE FUNCTION func_clientAuth
(
	uname VARCHAR(50),
	pwd	VARCHAR(50)
)
RETURNS TABLE(id BIGINT, name VARCHAR, surname VARCHAR, dateOfBirth DATE) 
AS $$
BEGIN
    RETURN QUERY 
    SELECT c.id, c.name, c.surname, c.dateOfBirth 
	FROM "public".clients c
	inner join "public".phones p on p.clientid = c.id
	inner join "public".emails e on e.clientid = c.id
	WHERE 
	(
		p.phonenumber = uname 
		OR 
		e.emailAddress = uname
	) 
	and 
	c.securepwd = pwd;
END;
$$ LANGUAGE plpgsql;





-- PROCEDURE: public.md_createaccount(character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying)

-- DROP PROCEDURE IF EXISTS public.md_createaccount(character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying);

CREATE OR REPLACE PROCEDURE public.md_createaccount(
	IN fname character varying,
	IN fsurname character varying,
	IN fdateofbirth timestamp without time zone,
	IN fpasscode character varying,
	IN fsecuredpwd character varying,
	IN femail character varying,
	IN fcell character varying,
	IN fphone character varying,
	INOUT fclientid character varying,
	INOUT responsestatus character varying,
	INOUT responsecode character varying,
	INOUT responsemessage character varying)
LANGUAGE 'plpgsql'
AS $BODY$
DECLARE
		pfclientId BIGINT;
		--presponseStatus BOOLEAN;
		--presponseCode BIGINT;
		--responseMessage VARCHAR (500);
BEGIN
    SELECT p.clientId 
	FROM phones p
	LEFT JOIN emails e on e.clientid = p.clientid
	INTO pfclientId 
	WHERE (p.phoneNumber = fcell OR p.phoneNumber = fphone OR e.emailaddress = femail);

	IF pfclientId IS NULL OR pfclientId < 1 THEN
	
		INSERT INTO clients("name", surname, dateofbirth, passcode, securepwd)
		VALUES(fname, fsurname, fdateOfBirth, fpasscode, fsecuredpwd)
		RETURNING id INTO pfclientId;

		RAISE NOTICE 'Client Id % has been added', 
		pfclientId; 

		IF fcell IS NOT NULL THEN
			INSERT INTO phones(clientid, phonetypeid, phonenumber, isprimary)
			SELECT pfclientId, 1, fcell, true
			WHERE
			NOT EXISTS 
			(
				SELECT id FROM phones p WHERE p.clientId = pfclientId AND p.phonetypeid = 1
			);
		END IF;

		IF fphone IS NOT NULL AND fphone <> '' THEN
			INSERT INTO phones(clientid, phonetypeid, phonenumber, isprimary)
			SELECT pfclientId, 2, fphone, false
			WHERE
			NOT EXISTS 
			(
				SELECT id FROM phones p WHERE p.clientId = pfclientId AND p.phonetypeid = 2
			);
		END IF;

		fclientId := pfclientId;
		responseStatus := true;
		responseCode := 200;		
		responseMessage := 'Successfully created account';
		RAISE NOTICE 'Successfully created account with Id %', 
		pfclientId; 
		
	ELSE
	
		fclientId := pfclientId;
		responseStatus := false;
		responseCode := 409;
		responseMessage := 'Account with any of the provided phones or email already exists';
		RAISE NOTICE 'Account any of the provided phones (cell % or phone %) already exists with Id %', 
		fcell, 
		fphone,
		pfclientId;
		
	END IF;
    COMMIT;
END;
$BODY$;
ALTER PROCEDURE public.md_createaccount(character varying, character varying, timestamp without time zone, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying)
    OWNER TO postgres;




CREATE OR REPLACE PROCEDURE public.md_createbooking(
	IN fclientId BIGINT,
	IN ftypeofEventId BIGINT,
	IN feventDate timestamp without time zone,
	IN feventTime time,
	IN fexpectedAdultsAttendance INTEGER DEFAULT 0,
	IN fexpectedKidsAttendance INTEGER DEFAULT 0,
	IN femailAddress character DEFAULT '',
	IN fcellMobile character DEFAULT '',
	IN ftelNo character DEFAULT '',
	
	IN fadultMenuTacos BOOLEAN DEFAULT(false),
	IN fadultMenuChickenWrap BOOLEAN DEFAULT(false),
	IN fadultMenuChickenKebab BOOLEAN DEFAULT(false),
	
	IN fkidsMenuMiniPizzaCheese BOOLEAN DEFAULT(false),
	IN fkidsMenuMiniMiniPizza BOOLEAN DEFAULT(false),
	IN fkidsMenuMiniSliders BOOLEAN DEFAULT(false),
	IN fkidsMenuMiniHandpie BOOLEAN DEFAULT(false),
	
	IN fmenuDrinksIcetea BOOLEAN DEFAULT(false),
	IN fmenuDrinksOrangeJuice BOOLEAN DEFAULT(false),
	IN fmenuDrinksAppleJuice BOOLEAN DEFAULT(false),
	IN fmenuDrinksFantaOrange BOOLEAN DEFAULT(false),
	IN fmenuDrinksCocacola BOOLEAN DEFAULT(false),
	IN fmenuDrinksApricotJuice BOOLEAN DEFAULT(false),
	
	IN fmenuDessertOreoPudding BOOLEAN DEFAULT(false),
	IN fmenuDessertOreoBalls BOOLEAN DEFAULT(false),
	IN fmenuDessertChurros BOOLEAN DEFAULT(false),
	IN fmenuDessertDonuts BOOLEAN DEFAULT(false),
	IN fmenuDessertMalva BOOLEAN DEFAULT(false),
	IN fmenuDessertBerry BOOLEAN DEFAULT(false),
	
	IN fdecoration BOOLEAN DEFAULT(false),	
	IN fthemeDetails character DEFAULT '',
	
	IN faddressTypeId BIGINT DEFAULT(0),
	IN fstreetNumber character DEFAULT '',
	IN fstreetName character DEFAULT '',
	IN fcomplexBuilding character DEFAULT '',
	IN fsurburb character DEFAULT '',
	IN fcity character DEFAULT '',
	IN fzipcode character DEFAULT '',
	IN fprovince character DEFAULT '',
	IN fcountry character DEFAULT '',
	
	INOUT referenceNo VARCHAR(50) = '',
	INOUT responsestatus VARCHAR(50) = '',
	INOUT responsecode VARCHAR(50) = '',
	INOUT responsemessage VARCHAR(5000) = ''
)
LANGUAGE 'plpgsql'
AS $BODY$
DECLARE
		pOrderId BIGINT;
BEGIN

	SELECT p.id 
	FROM orderDetails p	
	INTO pOrderId 
	WHERE (p.eventDate = feventDate);

	IF pOrderId IS NULL OR pOrderId < 1 THEN

		INSERT INTO orderDetails(clientId, typeofEventId, eventDate, eventTime, expectedAdultsAttendance, expectedKidsAttendance, emailAddress, cellMobile,
		telNo, adultMenuTacos, adultMenuChickenWrap, adultMenuChickenKebab, kidsMenuMiniPizzaCheese, kidsMenuMiniMiniPizza, kidsMenuMiniSliders, kidsMenuMiniHandpie, 
		menuDrinksIcetea, menuDrinksOrangeJuice, menuDrinksAppleJuice, menuDrinksFantaOrange, menuDrinksCocacola, menuDrinksApricotJuice,
		menuDessertOreoPudding, menuDessertOreoBalls, menuDessertChurros, menuDessertDonuts, menuDessertMalva, menuDessertBerry, decoration, themeDetails)
		VALUES(fclientId, ftypeofEventId, feventDate, feventTime, fexpectedAdultsAttendance, fexpectedKidsAttendance, femailAddress, fcellMobile,
		ftelNo, fadultMenuTacos, fadultMenuChickenWrap, fadultMenuChickenKebab, fkidsMenuMiniPizzaCheese, fkidsMenuMiniMiniPizza, fkidsMenuMiniSliders, fkidsMenuMiniHandpie, 
		fmenuDrinksIcetea, fmenuDrinksOrangeJuice, fmenuDrinksAppleJuice, fmenuDrinksFantaOrange, fmenuDrinksCocacola, fmenuDrinksApricotJuice,
		fmenuDessertOreoPudding, fmenuDessertOreoBalls, fmenuDessertChurros, fmenuDessertDonuts, fmenuDessertMalva, fmenuDessertBerry, fdecoration, fthemeDetails)
			RETURNING id INTO pOrderId;


		IF pOrderId IS NOT NULL AND pOrderId > 1 THEN
			IF faddressTypeId > 0 THEN
				INSERT INTO orderDetailAddresses(orderId, addressTypeId, streetNumber, streetName, complexBuilding, surburb, city, zipcode, province, country)
				VALUES(pOrderId, faddressTypeId, fstreetNumber, fstreetName, fcomplexBuilding, fsurburb, fcity, fzipcode, fprovince, fcountry);
			END IF;
		END IF;

		IF pOrderId IS NOT NULL AND pOrderId > 1 THEN
			referenceNo := CAST(pOrderId AS VARCHAR(50));
			responseStatus := true;
			responseCode := 200;		
			responseMessage := 'Successfully created booking';
			RAISE NOTICE 'Successfully created booking with Id %', 
			pOrderId; 
			
		ELSE
			referenceNo := '';
			responseStatus := false;
			responseCode := 404;		
			responseMessage := 'Failed to create booking';
			RAISE NOTICE 'Failed to create booking with Id %', 
			pOrderId; 
			
		END IF;    

	ELSE
		referenceNo := CAST(pOrderId AS VARCHAR(50));
		responseStatus := false;
		responseCode := 409;		
		responseMessage := 'There is already an event booked on the selected date. Please choose another date.';
		RAISE NOTICE 'There is already an event booked on the selected date. Please choose another date with Id %', 
		pOrderId; 
	END IF;
    COMMIT;
END;
$BODY$;
