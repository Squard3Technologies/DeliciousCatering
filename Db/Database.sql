
CREATE TABLE IF NOT EXISTS phoneTypes
(
	id 		BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 1 START WITH 1 INCREMENT BY 1),
	name 	VARCHAR (50) UNIQUE NOT NULL,
	enabled	BOOLEAN NOT NULL DEFAULT(true),
	PRIMARY KEY(id)
);

INSERT INTO phoneTypes(name)
SELECT 'Tel'
WHERE
NOT EXISTS 
(
	SELECT name FROM phoneTypes WHERE name = 'Tel'
);

INSERT INTO phoneTypes(name)
SELECT 'Fax'
WHERE
NOT EXISTS 
(
	SELECT name FROM phoneTypes WHERE name = 'Fax'
);

INSERT INTO phoneTypes(name)
SELECT 'Cell'
WHERE
NOT EXISTS 
(
	SELECT name FROM phoneTypes WHERE name = 'Cell'
);


CREATE TABLE IF NOT EXISTS emailTypes
(
	id 		BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 1 START WITH 1 INCREMENT BY 1),
	name 	VARCHAR (50) UNIQUE NOT NULL,
	enabled	BOOLEAN NOT NULL DEFAULT(true),
	PRIMARY KEY(id)
);



INSERT INTO emailTypes(name)
SELECT 'Personal'
WHERE
NOT EXISTS 
(
	SELECT name FROM emailTypes WHERE name = 'Personal'
);


INSERT INTO emailTypes(name)
SELECT 'Work'
WHERE
NOT EXISTS 
(
	SELECT name FROM emailTypes WHERE name = 'Work'
);

INSERT INTO emailTypes(name)
SELECT 'Business'
WHERE
NOT EXISTS 
(
	SELECT name FROM emailTypes WHERE name = 'Business'
);


CREATE TABLE IF NOT EXISTS addressTypes
(
	id 		BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 1 START WITH 1 INCREMENT BY 1),
	name 	VARCHAR (50) UNIQUE NOT NULL,
	enabled	BOOLEAN NOT NULL DEFAULT(true),
	PRIMARY KEY(id)
);


INSERT INTO addressTypes(name)
SELECT 'Residential'
WHERE
NOT EXISTS 
(
	SELECT name FROM addressTypes WHERE name = 'Residential'
);

INSERT INTO addressTypes(name)
SELECT 'Business'
WHERE
NOT EXISTS 
(
	SELECT name FROM addressTypes WHERE name = 'Business'
);


CREATE TABLE IF NOT EXISTS orderStages
(
	id 		BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 1 START WITH 1 INCREMENT BY 1),
	name 	VARCHAR (50) UNIQUE NOT NULL,
	description 	VARCHAR (500) NULL,
	enabled	BOOLEAN NOT NULL DEFAULT(true),
	PRIMARY KEY(id)
);



INSERT INTO orderStages(name, description)
SELECT 'SUBMITTED', 'New orders received from the client'
WHERE
NOT EXISTS 
(
	SELECT name FROM orderStages WHERE name = 'SUBMITTED'
);



INSERT INTO orderStages(name, description)
SELECT 'AWAITING DEPOSIT', 'Orders received from the client, accepted by the business and awaiting deposit'
WHERE
NOT EXISTS 
(
	SELECT name FROM orderStages WHERE name = 'AWAITING DEPOSIT'
);



INSERT INTO orderStages(name, description)
SELECT 'CONFIRMED', 'Orders received from the client, accepted by the business and deposit received'
WHERE
NOT EXISTS 
(
	SELECT name FROM orderStages WHERE name = 'CONFIRMED'
);



INSERT INTO orderStages(name, description)
SELECT 'COMPLETED', 'Orders completed by the business'
WHERE
NOT EXISTS 
(
	SELECT name FROM orderStages WHERE name = 'COMPLETED'
);



INSERT INTO orderStages(name, description)
SELECT 'FULLY PAID', 'Orders completed by the business and client paid full amount'
WHERE
NOT EXISTS 
(
	SELECT name FROM orderStages WHERE name = 'FULLY PAID'
);
	
	
	
	
	
	


CREATE TABLE IF NOT EXISTS clients (
	id				BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 1000000000 START WITH 1000000000 INCREMENT BY 1),
	tittle			VARCHAR (50) NOT NULL,
	name 			VARCHAR (250) NOT NULL,
	surname 		VARCHAR (250) NOT NULL,
	dateOfBirth		DATE NULL,
	Gender	 		VARCHAR (50) NOT NULL,
	passcode		VARCHAR (50) NULL,
	securepwd		VARCHAR (500) NULL,
	created_at		TIMESTAMP NOT NULL DEFAULT NOW(),
	updated_at		TIMESTAMP NULL,
	deleted_at		TIMESTAMP NULL,
	PRIMARY KEY(id)
);

INSERT INTO clients(name, surname, dateOfBirth, passcode, securepwd)
SELECT 'Mr','Vusi', 'Malinga', '1990-04-01', 'Male', 'Pass123', 'Pass123'
WHERE
NOT EXISTS 
(
	SELECT id FROM clients WHERE id = 1000000000
);


CREATE TABLE IF NOT EXISTS users (
	id				BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 2000000000 START WITH 2000000000 INCREMENT BY 1),
	name 			VARCHAR (50) NOT NULL,
	surname 		VARCHAR (50) NOT NULL,
	dateOfBirth		DATE NULL,
	username		VARCHAR (50) UNIQUE NULL,
	password		VARCHAR (500) NOT NULL DEFAULT 'Pass123',
	created_at		TIMESTAMP NOT NULL DEFAULT NOW(),
	updated_at		TIMESTAMP NULL,
	deleted_at		TIMESTAMP NULL,
	PRIMARY KEY(id)
);


INSERT INTO users(name, surname, dateOfBirth, username)
SELECT 'Vusi', 'Malinga', '1990-04-01', 'vusieam'
WHERE
NOT EXISTS 
(
	SELECT id FROM users WHERE id = 2000000000
);



CREATE TABLE IF NOT EXISTS phones
(
	id 				BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 1 START WITH 1 INCREMENT BY 1),
	clientId	 	BIGINT NOT NULL,
	phoneTypeId 	BIGINT NULL,
	phoneNumber 	VARCHAR (50) UNIQUE NOT NULL,	
	IsPrimary		BOOLEAN NOT NULL,
	enabled			BOOLEAN NOT NULL DEFAULT(true),
	created_at		TIMESTAMP NOT NULL DEFAULT NOW(),
	updated_at		TIMESTAMP NULL,
	deleted_at		TIMESTAMP NULL,
	PRIMARY KEY(id),
	FOREIGN KEY (clientId) REFERENCES clients(id) ON DELETE CASCADE,
	FOREIGN KEY (phoneTypeId) REFERENCES phoneTypes(id) ON DELETE SET NULL
);


INSERT INTO phones(clientId, phoneTypeId, phoneNumber, IsPrimary)
SELECT 1000000000, 3, '0607452041', true
WHERE
NOT EXISTS 
(
	SELECT id FROM phones WHERE clientId = 1000000000
);
	


CREATE TABLE IF NOT EXISTS emails
(
	id 				BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 1 START WITH 1 INCREMENT BY 1),
	clientId	 	BIGINT NOT NULL,
	emailTypeId 	BIGINT NULL,
	emailAddress 	VARCHAR (50) UNIQUE NOT NULL,	
	IsPrimary		BOOLEAN NOT NULL,
	enabled			BOOLEAN NOT NULL DEFAULT(true),
	created_at		TIMESTAMP NOT NULL DEFAULT NOW(),
	updated_at		TIMESTAMP NULL,
	deleted_at		TIMESTAMP NULL,
	PRIMARY KEY(id),
	FOREIGN KEY (clientId) REFERENCES clients(id) ON DELETE CASCADE,
	FOREIGN KEY (emailTypeId) REFERENCES emailTypes(id) ON DELETE SET NULL
);

INSERT INTO emails(clientId, emailTypeId, emailAddress, IsPrimary)
SELECT 1000000000, 1, 'vusieam@gmail.com', true
WHERE
NOT EXISTS 
(
	SELECT e.id FROM emails e WHERE e.clientId = 1000000000
);


CREATE TABLE IF NOT EXISTS addresses
(
	id 				BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 1 START WITH 1 INCREMENT BY 1),
	clientId	 	BIGINT NOT NULL,
	addressTypeId 	BIGINT NULL,
	streetNumber 	VARCHAR (50) NULL,	
	streetName	 	VARCHAR (250) NULL,	
	complexBuilding	 	VARCHAR (250) NULL,	
	surburb		 	VARCHAR (250) NULL,	
	city		 	VARCHAR (250) NULL,	
	zipcode		 	VARCHAR (250) NULL,	
	province	 	VARCHAR (250) NULL,	
	country		 	VARCHAR (250) NULL,	
	IsPrimary		BOOLEAN NOT NULL,
	enabled			BOOLEAN NOT NULL DEFAULT(true),
	created_at		TIMESTAMP NOT NULL DEFAULT NOW(),
	updated_at		TIMESTAMP NULL,
	deleted_at		TIMESTAMP NULL,
	PRIMARY KEY(id),
	FOREIGN KEY (clientId) REFERENCES clients(id) ON DELETE CASCADE,
	FOREIGN KEY (addressTypeId) REFERENCES addressTypes(id) ON DELETE SET NULL
);






CREATE TABLE IF NOT EXISTS orderDetails
(
	id 				BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 9000000 START WITH 9000000 INCREMENT BY 1),
	clientId	 	BIGINT NOT NULL,
	typeofEvent 	VARCHAR (500) NOT NULL,
	eventDate	 	DATE NOT NULL,	
	eventTime	 	TIME NOT NULL,	
	expectedAdultsAttendance	 	integer DEFAULT 0,	
	expectedKidsAttendance	 		integer DEFAULT 0,	
	decoration		BOOLEAN NOT NULL,	
	themeDetails	VARCHAR (500) NULL,	
	totalCost		NUMERIC(7,5) NULL,
	stage			VARCHAR(50) NOT NULL DEFAULT('SUBMITTED'),--SUBMITTED|ACCEPTED|PAID|COMPLETED
	created_at		TIMESTAMP NOT NULL DEFAULT NOW(),
	updated_at		TIMESTAMP NULL,
	deleted_at		TIMESTAMP NULL,
	PRIMARY KEY(id),
	FOREIGN KEY (clientId) REFERENCES clients(id) ON DELETE CASCADE
);





CREATE TABLE IF NOT EXISTS orderDetailAddresses
(
	id 				BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 9000000 START WITH 9000000 INCREMENT BY 1),
	orderId		 	BIGINT NOT NULL REFERENCES orderDetails(id) ON DELETE CASCADE,
	addressTypeId 	BIGINT NULL REFERENCES addressTypes(id) ON DELETE SET NULL,
	streetNumber 	VARCHAR (50) NULL,	
	streetName	 	VARCHAR (250) NULL,	
	complexBuilding	 	VARCHAR (250) NULL,	
	surburb		 	VARCHAR (250) NULL,	
	city		 	VARCHAR (250) NULL,	
	zipcode		 	VARCHAR (250) NULL,	
	province	 	VARCHAR (250) NULL,	
	country		 	VARCHAR (250) NULL,	
	IsPrimary		BOOLEAN NOT NULL,
	enabled			BOOLEAN NOT NULL,
	created_at		TIMESTAMP NOT NULL DEFAULT NOW()
);


CREATE TABLE IF NOT EXISTS orderAccountBooks
(
	id 				BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (MINVALUE 9000000 START WITH 9000000 INCREMENT BY 1),
	orderId		 	BIGINT NOT NULL REFERENCES orderDetails(id),
	credit			NUMERIC(7,5) NOT NULL,
	runningBalance	NUMERIC(7,5) NULL,
	created_at		DATE NOT NULL DEFAULT NOW()
)




-------PROCEDURES


CREATE OR REPLACE FUNCTION func_clientAuth
(
	uname VARCHAR(50),
	pwd	VARCHAR(50)
)
RETURNS TABLE(id BIGINT, name VARCHAR, surname VARCHAR, dateOfBirth DATE) 
AS $$
BEGIN
    RETURN QUERY 
    SELECT c.id, c.name, c.surname, c.dateOfBirth 
	FROM "public".clients c
	inner join "public".phones p on p.clientid = c.id
	inner join "public".emails e on e.clientid = c.id
	WHERE 
	(
		p.phonenumber = uname 
		OR 
		e.emailAddress = uname
	) 
	and 
	c.securepwd = pwd;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE PROCEDURE sp_createAccount
(
   fname VARCHAR(250),
   fsurname VARCHAR(250),
   fdateOfBirth DATE,
   fpasscode VARCHAR(50),
   fsecuredPwd VARCHAR (500),
   femail VARCHAR (500),  
   fcell VARCHAR (500),
   fphone VARCHAR (500) DEFAULT null,
   INOUT fclientId BIGINT DEFAULT -1,
   INOUT responseStatus BOOLEAN DEFAULT false,
   INOUT responseCode BIGINT DEFAULT 0,
   INOUT responseMessage VARCHAR (500) DEFAULT ''
)
LANGUAGE plpgsql
AS $$
BEGIN
    SELECT p.clientId 
	FROM phones p 
	INTO fclientId 
	WHERE (p.phoneNumber = fcell OR p.phoneNumber = fphone);
	
	IF fclientId IS NULL OR fclientId < 1 THEN
	
		INSERT INTO clients("name", surname, dateofbirth, passcode, securepwd)
		VALUES(fname, fsurname, fdateOfBirth, fpasscode, fsecuredpwd)
		RETURNING id INTO fclientId;

		RAISE NOTICE 'Client Id % has been added', 
		fclientId; 

		IF fcell IS NOT NULL THEN
			INSERT INTO phones(clientid, phonetypeid, phonenumber, isprimary)
			SELECT fclientId, 1, fcell, true
			WHERE
			NOT EXISTS 
			(
				SELECT id FROM phones p WHERE p.clientId = fclientId AND p.phonetypeid = 1
			);
		END IF;

		IF fphone IS NOT NULL THEN
			INSERT INTO phones(clientid, phonetypeid, phonenumber, isprimary)
			SELECT fclientId, 2, fphone, false
			WHERE
			NOT EXISTS 
			(
				SELECT id FROM phones p WHERE p.clientId = fclientId AND p.phonetypeid = 2
			);
		END IF;

		responseStatus := true;
		responseCode := 200;
		responseMessage := 'Successfully created account';
		RAISE NOTICE 'Successfully created account with Id %', 
		fclientId; 
		
	ELSE
	
		responseStatus := false;
		responseCode := 409;
		responseMessage := 'Account any of the provided phones already exists';
		RAISE NOTICE 'Account any of the provided phones (cell % or phone %) already exists with Id %', 
		fcell, 
		fphone,
		fclientId;
		
	END IF;
    COMMIT;
END;$$;
